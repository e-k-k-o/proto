// Code generated by protoc-gen-go. DO NOT EDIT.
// source: locator.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Location struct {
	Latitude             int64    `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            int64    `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5dcb59738b6bbf4, []int{0}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLatitude() int64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() int64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func init() {
	proto.RegisterType((*Location)(nil), "proto.Location")
}

func init() {
	proto.RegisterFile("locator.proto", fileDescriptor_c5dcb59738b6bbf4)
}

var fileDescriptor_c5dcb59738b6bbf4 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xc9, 0x4f, 0x4e,
	0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xd2, 0xe9,
	0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x6a, 0x6e, 0x41, 0x49,
	0x25, 0x44, 0x8d, 0x14, 0x4f, 0x6a, 0x5e, 0x49, 0x26, 0x8c, 0xa7, 0xe4, 0xc2, 0xc5, 0xe1, 0x03,
	0x32, 0x22, 0x33, 0x3f, 0x4f, 0x48, 0x8a, 0x8b, 0x23, 0x27, 0xb1, 0x24, 0xb3, 0xa4, 0x34, 0x25,
	0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x39, 0x08, 0xce, 0x17, 0x92, 0xe1, 0xe2, 0xcc, 0xc9, 0xcf,
	0x4b, 0x87, 0x48, 0x32, 0x81, 0x25, 0x11, 0x02, 0x46, 0xc7, 0x18, 0xb9, 0xd8, 0x7d, 0x20, 0x2e,
	0x11, 0x32, 0xe4, 0xe2, 0x08, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x49, 0x2d, 0x12, 0xe2, 0x85, 0xd8,
	0xa2, 0xe7, 0x0a, 0xb6, 0x52, 0x4a, 0x4c, 0x0f, 0xe2, 0x30, 0x3d, 0x98, 0xc3, 0xf4, 0x5c, 0x41,
	0x0e, 0x13, 0xd2, 0xe7, 0x62, 0x0b, 0x4a, 0xcd, 0xcd, 0x2f, 0x4b, 0x25, 0x5e, 0x03, 0x4b, 0x40,
	0x66, 0x5e, 0xba, 0x10, 0x3f, 0x54, 0x39, 0xcc, 0x0b, 0x38, 0x35, 0xa8, 0x71, 0xb1, 0xb8, 0x65,
	0xe6, 0xa5, 0xa0, 0x9b, 0x8f, 0xae, 0xdf, 0x49, 0x9d, 0x8b, 0x2f, 0x39, 0x3f, 0x57, 0x2f, 0x35,
	0x39, 0x23, 0x1f, 0x22, 0xe5, 0xc4, 0x03, 0xf5, 0x57, 0x00, 0x88, 0x17, 0xc5, 0xae, 0x67, 0x0d,
	0x31, 0x99, 0x0d, 0x4c, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x65, 0xa2, 0x56, 0x34, 0x81,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LocatorClient is the client API for Locator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocatorClient interface {
	Register(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*empty.Empty, error)
	Remove(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*empty.Empty, error)
	Ping(ctx context.Context, in *Location, opts ...grpc.CallOption) (*empty.Empty, error)
	Find(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Location, error)
}

type locatorClient struct {
	cc grpc.ClientConnInterface
}

func NewLocatorClient(cc grpc.ClientConnInterface) LocatorClient {
	return &locatorClient{cc}
}

func (c *locatorClient) Register(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Locator/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locatorClient) Remove(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Locator/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locatorClient) Ping(ctx context.Context, in *Location, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Locator/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locatorClient) Find(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/proto.Locator/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocatorServer is the server API for Locator service.
type LocatorServer interface {
	Register(context.Context, *Entity) (*empty.Empty, error)
	Remove(context.Context, *Entity) (*empty.Empty, error)
	Ping(context.Context, *Location) (*empty.Empty, error)
	Find(context.Context, *Entity) (*Location, error)
}

// UnimplementedLocatorServer can be embedded to have forward compatible implementations.
type UnimplementedLocatorServer struct {
}

func (*UnimplementedLocatorServer) Register(ctx context.Context, req *Entity) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedLocatorServer) Remove(ctx context.Context, req *Entity) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedLocatorServer) Ping(ctx context.Context, req *Location) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedLocatorServer) Find(ctx context.Context, req *Entity) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}

func RegisterLocatorServer(s *grpc.Server, srv LocatorServer) {
	s.RegisterService(&_Locator_serviceDesc, srv)
}

func _Locator_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocatorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Locator/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocatorServer).Register(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locator_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocatorServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Locator/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocatorServer).Remove(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locator_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocatorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Locator/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocatorServer).Ping(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locator_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocatorServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Locator/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocatorServer).Find(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Locator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Locator",
	HandlerType: (*LocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Locator_Register_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Locator_Remove_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Locator_Ping_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Locator_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "locator.proto",
}
