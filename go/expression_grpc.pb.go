// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExpressionClient is the client API for Expression service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpressionClient interface {
	AudioStream(ctx context.Context, in *StreamSource, opts ...grpc.CallOption) (Expression_AudioStreamClient, error)
}

type expressionClient struct {
	cc grpc.ClientConnInterface
}

func NewExpressionClient(cc grpc.ClientConnInterface) ExpressionClient {
	return &expressionClient{cc}
}

func (c *expressionClient) AudioStream(ctx context.Context, in *StreamSource, opts ...grpc.CallOption) (Expression_AudioStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Expression_serviceDesc.Streams[0], "/proto.Expression/AudioStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &expressionAudioStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Expression_AudioStreamClient interface {
	Recv() (*AudioSample, error)
	grpc.ClientStream
}

type expressionAudioStreamClient struct {
	grpc.ClientStream
}

func (x *expressionAudioStreamClient) Recv() (*AudioSample, error) {
	m := new(AudioSample)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExpressionServer is the server API for Expression service.
// All implementations must embed UnimplementedExpressionServer
// for forward compatibility
type ExpressionServer interface {
	AudioStream(*StreamSource, Expression_AudioStreamServer) error
	mustEmbedUnimplementedExpressionServer()
}

// UnimplementedExpressionServer must be embedded to have forward compatible implementations.
type UnimplementedExpressionServer struct {
}

func (UnimplementedExpressionServer) AudioStream(*StreamSource, Expression_AudioStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AudioStream not implemented")
}
func (UnimplementedExpressionServer) mustEmbedUnimplementedExpressionServer() {}

// UnsafeExpressionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpressionServer will
// result in compilation errors.
type UnsafeExpressionServer interface {
	mustEmbedUnimplementedExpressionServer()
}

func RegisterExpressionServer(s grpc.ServiceRegistrar, srv ExpressionServer) {
	s.RegisterService(&_Expression_serviceDesc, srv)
}

func _Expression_AudioStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSource)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExpressionServer).AudioStream(m, &expressionAudioStreamServer{stream})
}

type Expression_AudioStreamServer interface {
	Send(*AudioSample) error
	grpc.ServerStream
}

type expressionAudioStreamServer struct {
	grpc.ServerStream
}

func (x *expressionAudioStreamServer) Send(m *AudioSample) error {
	return x.ServerStream.SendMsg(m)
}

var _Expression_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Expression",
	HandlerType: (*ExpressionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AudioStream",
			Handler:       _Expression_AudioStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "expression.proto",
}
