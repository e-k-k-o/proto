// Code generated by protoc-gen-go. DO NOT EDIT.
// source: expression.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamSource struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamSource) Reset()         { *m = StreamSource{} }
func (m *StreamSource) String() string { return proto.CompactTextString(m) }
func (*StreamSource) ProtoMessage()    {}
func (*StreamSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc7550768b3bd34, []int{0}
}

func (m *StreamSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamSource.Unmarshal(m, b)
}
func (m *StreamSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamSource.Marshal(b, m, deterministic)
}
func (m *StreamSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamSource.Merge(m, src)
}
func (m *StreamSource) XXX_Size() int {
	return xxx_messageInfo_StreamSource.Size(m)
}
func (m *StreamSource) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamSource.DiscardUnknown(m)
}

var xxx_messageInfo_StreamSource proto.InternalMessageInfo

func (m *StreamSource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamSource)(nil), "proto.StreamSource")
}

func init() {
	proto.RegisterFile("expression.proto", fileDescriptor_fcc7550768b3bd34)
}

var fileDescriptor_fcc7550768b3bd34 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xad, 0x28, 0x28,
	0x4a, 0x2d, 0x2e, 0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53,
	0x52, 0xdc, 0x89, 0xa5, 0x29, 0x99, 0xf9, 0x10, 0x31, 0x25, 0x39, 0x2e, 0x9e, 0xe0, 0x92, 0xa2,
	0xd4, 0xc4, 0xdc, 0xe0, 0xfc, 0xd2, 0xa2, 0xe4, 0x54, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0xa6, 0xcc, 0x14, 0x23, 0x37, 0x2e, 0x2e, 0x57, 0xb8, 0x39,
	0x42, 0x16, 0x5c, 0xdc, 0x8e, 0x20, 0xcd, 0x10, 0x2d, 0x42, 0xc2, 0x10, 0x43, 0xf4, 0x90, 0x4d,
	0x90, 0x12, 0x82, 0x0a, 0x42, 0x14, 0x26, 0xe6, 0x16, 0xe4, 0xa4, 0x1a, 0x30, 0x3a, 0x69, 0x71,
	0xf1, 0x25, 0xe7, 0xe7, 0xea, 0xa5, 0x26, 0x67, 0x40, 0x6d, 0x76, 0xe2, 0x47, 0x98, 0x1b, 0x00,
	0x12, 0x88, 0x62, 0xd7, 0xb3, 0x06, 0xcb, 0x24, 0xb1, 0x81, 0x29, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa8, 0x3f, 0x13, 0x80, 0xc2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExpressionClient is the client API for Expression service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExpressionClient interface {
	AudioStream(ctx context.Context, in *StreamSource, opts ...grpc.CallOption) (Expression_AudioStreamClient, error)
}

type expressionClient struct {
	cc grpc.ClientConnInterface
}

func NewExpressionClient(cc grpc.ClientConnInterface) ExpressionClient {
	return &expressionClient{cc}
}

func (c *expressionClient) AudioStream(ctx context.Context, in *StreamSource, opts ...grpc.CallOption) (Expression_AudioStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Expression_serviceDesc.Streams[0], "/proto.Expression/AudioStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &expressionAudioStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Expression_AudioStreamClient interface {
	Recv() (*AudioSample, error)
	grpc.ClientStream
}

type expressionAudioStreamClient struct {
	grpc.ClientStream
}

func (x *expressionAudioStreamClient) Recv() (*AudioSample, error) {
	m := new(AudioSample)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExpressionServer is the server API for Expression service.
type ExpressionServer interface {
	AudioStream(*StreamSource, Expression_AudioStreamServer) error
}

// UnimplementedExpressionServer can be embedded to have forward compatible implementations.
type UnimplementedExpressionServer struct {
}

func (*UnimplementedExpressionServer) AudioStream(req *StreamSource, srv Expression_AudioStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AudioStream not implemented")
}

func RegisterExpressionServer(s *grpc.Server, srv ExpressionServer) {
	s.RegisterService(&_Expression_serviceDesc, srv)
}

func _Expression_AudioStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSource)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExpressionServer).AudioStream(m, &expressionAudioStreamServer{stream})
}

type Expression_AudioStreamServer interface {
	Send(*AudioSample) error
	grpc.ServerStream
}

type expressionAudioStreamServer struct {
	grpc.ServerStream
}

func (x *expressionAudioStreamServer) Send(m *AudioSample) error {
	return x.ServerStream.SendMsg(m)
}

var _Expression_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Expression",
	HandlerType: (*ExpressionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AudioStream",
			Handler:       _Expression_AudioStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "expression.proto",
}
